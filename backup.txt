- docker-compose.yml
version: '3.3'

networks:
  mynet:
    driver: bridge

services:
  mysql:
    container_name: mysql
    image: mariadb:latest
    environment:
      MYSQL_ROOT_PASSWORD: MyDBRoot123
      MYSQL_DATABASE: cloud_computing
      MYSQL_USER: php
      MYSQL_PASSWORD: php
    volumes:
      - ./src/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynet

  myphp:
    container_name: myphp
    image: myphp
    build:
      context: ./src/php/
      dockerfile: dockerfile
    expose:
      - 9000
    volumes:
      - ./src:/var/www/html
    depends_on:
      - mysql
    networks:
      - mynet

  mynginx:
    container_name: mynginx
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./src:/var/www/html
      - ./src/nginx.ini:/etc/nginx/conf.d/default.conf
    depends_on:
      - myphp
    networks:
      - mynet

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql
    networks:
      - mynet
               

- Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aqademy
  labels:
    app: aqademy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: aqademy
  template:
    metadata:
      labels:
        app: aqademy
    spec:
      containers:
        - name: myphp
          image: php:8.2-fpm # Replace with your Docker image name and tag
          ports:
            - containerPort: 9000 # Assuming your PHP application runs on port 9000
          volumeMounts:
            - name: app-volume
              mountPath: /var/www/html
        - name: mynginx
          image: nginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: app-volume
              mountPath: /var/www/html
      volumes:
        - name: app-volume
          emptyDir: {}

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: aqademy
# spec:
#   type: NodePort
#   selector:
#     app: aqademy
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80 # Assuming your PHP application runs on port 9000
#       nodePort: 30100
#   # type: LoadBalancer # Use 'LoadBalancer' if you want an external IP (requires cloud provider support)